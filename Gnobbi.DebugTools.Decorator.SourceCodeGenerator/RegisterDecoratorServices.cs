using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Gnobbi.DebugTools.Decorator.SourceCodeGenerator
{
    [Generator]
    public class DecoratorSourceGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            context.RegisterForSyntaxNotifications(() => new InterfaceReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (!(context.SyntaxReceiver is InterfaceReceiver receiver))
                return;

            receiver.SetContext(context);
            var compilation = context.Compilation;
            var namespaces = new HashSet<string>();
            var registrations = new StringBuilder();

            foreach (var ifaceDecl in receiver.CandidateInterfaces)
            {
                var model = compilation.GetSemanticModel(ifaceDecl.SyntaxTree);
                if (!(model.GetDeclaredSymbol(ifaceDecl) is INamedTypeSymbol ifaceSymbol))
                    continue;

                if (!receiver.IsAcceped(ifaceSymbol))
                {
                    continue;
                }

                var ifaceNs = ifaceSymbol.ContainingNamespace?.ToDisplayString();
                if (!string.IsNullOrWhiteSpace(ifaceNs))
                    namespaces.Add(ifaceNs);

                var ifaceName = ifaceSymbol.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat);
                var baseName = ifaceName.StartsWith("I") ? ifaceName.Substring(1) : ifaceName;

                registrations.AppendLine($"            services.Decorate<{ifaceName}>((inner, s) => {{ var handler = s.GetRequiredService<IDiagnosticEntryHandler>(); return new {baseName}_DiagnosticDecorator(inner, handler);}});");
            }

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");

            foreach (var ns in namespaces.OrderBy(n => n))
                sb.AppendLine($"using {ns};");

            sb.AppendLine("using System;");
            sb.AppendLine("using Microsoft.Extensions.DependencyInjection;");
            sb.AppendLine();
            sb.AppendLine("namespace Gnobbi.DebugTools.Decorator");
            sb.AppendLine("{");
            sb.AppendLine("    public static class ServiceDecoratorRegistration");
            sb.AppendLine("    {");
            sb.AppendLine("        public static IServiceCollection RegisterDecorators(IServiceCollection services)");
            sb.AppendLine("        {");
            sb.Append(registrations);
            sb.AppendLine("            return services;");
            sb.AppendLine("        }");
            sb.AppendLine("    }");
            sb.AppendLine("}");

            context.AddSource("ServiceDecoratorRegistration.g.cs", SourceText.From(sb.ToString(), Encoding.UTF8));
        }
    }
}
